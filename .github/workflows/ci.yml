name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    name: Lint
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          check-latest: true
      # Removed blank line here
      - name: Install golangci-lint
        run: |
          # Install the latest golangci-lint using the official script
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
          # The script automatically installs the latest version if no version tag is provided
          golangci-lint --version

      - name: Run golangci-lint
        run: golangci-lint run ./...

  test:
    name: Test
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          check-latest: true

      - name: Install cron (for local act simulation)
        # This is needed because the Ubuntu container used for simulation doesn't have cron/crontab by default.
        # The actual macos-latest runner on GitHub has it.
        run: |
          apt-get update && apt-get install -y --no-install-recommends cron || echo "apt-get failed but continuing..."
          # Verify installation and force success if command exists
          which crontab || (echo "crontab command not found after install!" && exit 1)
          crontab -l || echo "crontab -l failed but continuing..."
          exit 0

      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.txt # Changed 'file' to 'files'
          fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: macos-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          check-latest: true

      - name: Run integration tests
        run: go test -v -tags=integration ./... # Removed incorrect -args flag

  build:
    name: Build
    runs-on: macos-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          check-latest: true

      - name: Build
        run: make build

      - name: Create ZIP package
        run: make zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: settingssentry
          path: |
            SettingsSentry
            SettingsSentry.zip
